<com.android.layoutlib.bridge.android.BridgeContext: Pair<View, Boolean> inflateView(ResourceReference,ViewGroup,boolean,boolean)>
<com.android.server.am.ActivityManagerService.MainHandler: void handleMessage(Message)>
<com.android.systemui.doze.DozeSensors.ProxSensor: void onSensorChanged(SensorEvent)>
<com.android.server.connectivity.Tethering.TetherMasterSM.TetherMasterUtilState: void chooseUpstreamType(boolean)>
<com.android.systemui.statusbar.phone.NotificationPanelView: void onLayout(boolean,int,int,int,int)>
<com.android.systemui.statusbar.phone.PhoneStatusBar: void updateMediaMetaData(boolean)>
<com.android.server.locksettings.LockSettingsService: void tieManagedProfileLockIfNecessary(int,byte[])>
<android.location.LocationManager: void requestSingleUpdate(String,PendingIntent)>
<com.android.layoutlib.bridge.android.BridgeInflater: View inflate(int,ViewGroup)>
<android.service.carrier.CarrierIdentifier: String toString()>
<com.android.server.am.AppTaskImpl: void finishAndRemoveTask()>
<com.android.server.locksettings.SyntheticPasswordManager: long createPasswordBasedSyntheticPassword(IGateKeeperService,byte[],int,AuthenticationToken,int,int)>
<com.android.server.notification.NotificationManagerService.LEDSettingsObserver: void update(Uri)>
<com.android.settingslib.bluetooth.BluetoothEventManager.DeviceFoundHandler: void onReceive(Context,Intent,BluetoothDevice)>
<com.android.systemui.recents.views.TaskViewHeader: void onFinishInflate()>
<com.android.server.audio.AudioService.AudioServiceBroadcastReceiver: void onReceive(Context,Intent)>
<android.net.wifi.WifiStateMachine: void setCountryCode(String,boolean)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void updateAlarm()>
<com.android.systemui.statusbar.BaseStatusBar: void start()>
<com.android.keyguard.KeyguardSimPinView: void showDefaultMessage()>
<com.android.server.wm.WindowState: void dump(PrintWriter,String,boolean)>
<android.telephony.TelephonyManager: int getDataNetworkType()>
<com.android.systemui.volume.VolumePanel: void onShowVolumeChanged(int,int,MediaController)>
<com.android.systemui.statusbar.policy.HeadsUpNotificationView.EdgeSwipeHelper: boolean onInterceptTouchEvent(MotionEvent)>
<com.android.systemui.statusbar.phone.NavigationBarView: void getIcons(Resources)>
<com.android.systemui.util.NotificationChannels: void createAll(Context)>
<com.android.server.SystemConfig: void readPermissionsFromXml(File,boolean)>
<com.android.wallpapercropper.WallpaperCropActivity.BitmapCropTask: boolean cropBitmap()>
<com.android.server.power.PowerManagerService.PowerManagerHandler: void handleMessage(Message)>
<com.android.server.audio.AudioService: void resetBluetoothSco()>
<com.android.server.audio.AudioService: boolean isSpeakerphoneOn()>
<com.android.server.wm.DisplayContent.TaskStackContainers: int getOrientation()>
<com.android.systemui.statusbar.phone.LockIcon: void update(boolean)>
<com.android.server.audio.AudioService.ScoClient: int totalCount()>
<com.android.systemui.tuner.TunerActivity: void onCreate(Bundle)>
<com.android.systemui.statusbar.phone.StatusBar.DozeServiceHost: void onIgnoreTouchWhilePulsing(boolean)>
<com.android.keyguard.KeyguardSimPukView: void onFinishInflate()>
<com.android.server.locksettings.LockSettingsService: void setLockCredentialInternal(byte[],int,byte[],int,int,boolean,boolean)>
<android.location.LocationManager: boolean sendExtraCommand(String,String,Bundle)>
<android.accounts.AccountManager: AccountManagerFuture<String> getAuthTokenLabel(String,String,AccountManagerCallback<String>,Handler)>
<com.android.server.pm.UserManagerService: UserInfo createUserInternalUnchecked(String,int,int,String[])>
<android.net.wifi.WifiManager.SoftApCallbackProxy: void onStaDisconnected(String,int)>
<com.android.internal.telephony.cdma.SmsMessage: void parsePduFromEfRecord(byte[])>
<com.android.server.audio.BtHelper: void receiveBtEvent(Intent)>
<android.media.ExifInterface: void saveAttributes()>
<com.android.server.WiredAccessoryManager.WiredAccessoryExtconObserver: void updateState(ExtconInfo,String,Pair<Integer, Integer>)>
<android.preference.SeekBarVolumizer: void updateSeekBar()>
<com.android.server.locksettings.LockSettingsService.LocalService: boolean setLockCredentialWithToken(byte[],int,long,byte[],int,int)>
<com.android.internal.location.GpsLocationProvider: void reportStatus(int)>
<com.android.server.wm.ScreenRotationAnimation: boolean stepAnimationLocked(long)>
<com.android.keyguard.KeyguardSimPinView: void verifyPasswordAndUnlock()>
<android.media.AudioFormat: boolean isEncodingLinearPcm(int)>
<com.android.server.connectivity.NetworkAgentInfo: void updateClat(INetworkManagementService)>
<com.android.systemui.qs.QSFooter: void setListening(boolean)>
<com.android.settingslib.drawer.SettingsDrawerActivity: void showMenuIcon()>
<com.android.internal.os.ZygoteInit: void preloadSharedLibraries()>
<com.android.systemui.statusbar.phone.NavigationBarView: void updateResources()>
<com.android.settingslib.fuelgauge.PowerWhitelistBackendTest: void setUp()>
<android.net.wifi.WifiConfiguration: String configKey(boolean)>
<com.android.settingslib.wifi.AccessPoint: int getPskType(ScanResult)>
<com.android.systemui.statusbar.policy.MobileSignalController: int getQsCurrentIconId()>
<android.telephony.SmsManager: int getSubscriptionId()>
<com.android.systemui.classifier.FalsingManagerProxyTest: void setup()>
<com.android.systemui.statusbar.phone.PhoneStatusBar.MyTicker: void tickerHalting()>
<com.android.internal.policy.impl.keyguard.KeyguardViewManager.ViewManagerHost: boolean dispatchKeyEvent(KeyEvent)>
<com.android.server.audio.AudioService.SetModeDeathHandler: void binderDied()>
<com.android.settingslib.bluetooth.A2dpProfile: boolean isHighQualityAudioEnabled(BluetoothDevice)>
<com.android.server.LocationManagerService: Location screenLocationLocked(Location,String)>
<com.android.server.ConnectivityServiceTest: void testNattSocketKeepalives()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: boolean isA2dpDevice()>
<com.android.systemui.shared.system.TaskStackChangeListeners.H: void handleMessage(Message)>
<com.android.server.wm.ActivityStack: boolean finishActivityLocked(ActivityRecord,int,Intent,String,boolean,boolean)>
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void onFinishInflate()>
<com.android.server.ConnectivityService.InternalHandler: void handleMessage(Message)>
<com.android.server.pm.PackageManagerService: void cleanPackageDataStructuresLILPw(Package,boolean)>
<com.android.server.audio.BtHelper.ScoClient: void incCount(int)>
<android.net.wifi.WifiConfiguration: String toString()>
<com.android.internal.policy.impl.PhoneWindowManager: int finishAnimationLw()>
<com.android.internal.policy.impl.keyguard.KeyguardWidgetPager: void onPageSwitched(View,int)>
<android.location.LocationManager: void requestLocationUpdates(long,float,Criteria,LocationListener,Looper)>
<android.service.carrier.CarrierIdentifier: void readFromParcel(Parcel)>
<com.android.systemui.statusbar.SignalClusterView: void apply()>
<com.android.server.wm.ScreenRotationAnimation: boolean stepAnimation(long)>
<com.android.server.wm.ActivityStack: void stopActivityLocked(ActivityRecord)>
<com.android.server.am.ActivityStack: boolean resumeTopActivityInnerLocked(ActivityRecord,ActivityOptions)>
<android.location.LocationManager: boolean setProviderEnabledForUser(String,boolean,UserHandle)>
<com.android.systemui.statusbar.phone.NotificationPanelView: void loadDimens()>
<android.app.ActivityManagerNative: boolean onTransact(int,Parcel,Parcel,int)>
<com.android.server.wm.DisplayContent: ActivityStack getFocusedStack()>
<android.widget.AbsListView: void onLayout(boolean,int,int,int,int)>
<com.android.server.policy.PhoneWindowManager.PolicyHandler: void handleMessage(Message)>
<com.android.server.BluetoothManagerService: void continueFromBleOnState()>
<com.android.server.am.ActivityManagerService: SleepToken acquireSleepToken(String,int)>
<com.android.server.wm.ActivityStarter: int startActivityUnchecked(ActivityRecord,ActivityRecord,IVoiceInteractionSession,IVoiceInteractor,int,boolean,ActivityOptions,TaskRecord,ActivityRecord[],boolean)>
<com.android.keyguard.CarrierTextController: void updateCarrierText()>
<com.android.server.power.DisplayPowerController: void updatePowerState()>
<com.android.systemui.statusbar.phone.QuickSettings: void addSystemTiles(ViewGroup,LayoutInflater)>
<com.android.server.locksettings.LockSettingsService: void setUserKeyProtection(int,byte[],VerifyCredentialResponse)>
<com.android.server.policy.PhoneWindowManager: void updateSettings()>
<com.android.internal.policy.impl.PhoneWindowManager: void layoutWindowLw(WindowState,LayoutParams,WindowState)>
<com.android.settingslib.bluetooth.A2dpProfile: boolean supportsHighQualityAudio(BluetoothDevice)>
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsInternal()>
<com.android.server.am.ActivityStackSupervisor: ActivityRecord findTaskLocked(ActivityRecord,int)>
<com.android.internal.os.BatteryStatsImpl: void notePhoneSignalStrengthLocked(SignalStrength)>
<android.bluetooth.BluetoothHeadset: void doUnbind()>
<android.net.wifi.WifiInfo: void writeToParcel(Parcel,int)>
<com.android.server.ConnectivityService: void updateNetworkInfo(NetworkAgentInfo,NetworkInfo)>
<com.android.server.audio.AudioService: boolean handleBtScoActiveDeviceChange(BluetoothDevice,boolean)>
<android.bluetooth.BluetoothAdapter: boolean factoryReset()>
<com.android.server.ConnectivityServiceTest: void doTestNattSocketKeepalivesWithExecutor(Executor)>
<android.content.pm.PackageParser: ApkLite parseApkLite(String,Resources,XmlPullParser,AttributeSet,int,Signature[])>
<com.android.server.ConnectivityService: void handleConnect(NetworkInfo)>
<com.android.server.wm.ActivityRecord: void stopIfPossible()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void sessionStart()>
<android.telephony.TelephonyManager: int getSimState(int)>
<com.android.server.lights.LightsService.LightImpl: void setLightLocked(int,int,int,int,int)>
<com.android.server.am.ActivityManagerService: boolean startProcessLocked(String,String,String,ProcessRecord,int,int[],int,int,String,String,String,String,long)>
<android.bluetooth.BluetoothCodecConfig: boolean sameCodecSpecificParameters(BluetoothCodecConfig)>
<com.android.server.wm.ActivityStack: boolean resumeTopActivityInnerLocked(ActivityRecord,ActivityOptions)>
<com.android.server.locksettings.LockSettingsService: long setLockCredentialWithAuthTokenLocked(byte[],int,AuthenticationToken,int,int)>
<com.android.documentsui.DocumentsActivity.PickFinishTask: void onPostExecute(Void)>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void registerListeners()>
<com.android.server.AlarmManagerService: void setImpl(int,long,long,long,PendingIntent,boolean,WorkSource,AlarmClockInfo)>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void onRevealStart(boolean)>
<com.android.internal.policy.impl.PhoneWindowManager: int rotationForOrientationLw(int,int)>
<com.android.server.SystemServer: void startOtherServices()>
<android.content.ContentResolver: Cursor query(Uri,String[],Bundle,CancellationSignal)>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setSubs(List<SubscriptionInfo>)>
<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(IBinder)>
<com.android.server.wm.WindowStateAnimator: void prepareSurfaceLocked(boolean)>
<com.android.systemui.glwallpaper.ImageWallpaperRenderer: void onRevealEnd()>
<com.android.internal.policy.impl.PhoneWindowManager: void applyPostLayoutPolicyLw(WindowState,LayoutParams)>
<com.android.server.locksettings.LockSettingsService: VerifyCredentialResponse checkCredential(LockscreenCredential,int,ICheckCredentialProgressCallback)>
<android.telephony.TelephonyManager: void notifyUserActivity()>
<com.android.server.ConnectivityService: void rematchNetworkAndRequests(NetworkReassignment,NetworkAgentInfo,long)>
<com.android.server.ConnectivityService: void updateCapabilities(int,NetworkAgentInfo,NetworkCapabilities)>
<com.android.server.audio.AudioService: void adjustSuggestedStreamVolume(int,int,int,String,String,int)>
<com.android.server.policy.PhoneWindowManager: void beginLayoutLw(boolean,int,int,int,int)>
<com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo: void start(int)>
<android.content.ContentResolver: Uri insert(Uri,ContentValues)>
<com.android.server.BluetoothManagerService.ClientDeathRecipient: void binderDied()>
<android.app.ActivityThread: Context createBaseContextForActivity(ActivityClientRecord,Activity)>
<com.android.server.notification.ScheduleConditionProvider: void onUnsubscribe(Uri)>
<com.android.server.am.ProcessRecord: void appNotResponding(String,ApplicationInfo,String,WindowProcessController,boolean,String)>
<com.android.server.pm.PackageVerificationState: boolean isInstallAllowed()>
<com.android.systemui.statusbar.phone.QuickSettingsContainerView: void onLayout(boolean,int,int,int,int)>
<com.android.server.power.ShutdownThread: void beginShutdownSequence(Context)>
<android.media.AudioFormat: boolean isValidEncoding(int)>
<com.android.server.am.ActivityManagerService: void finishBooting()>
<com.android.externalstorage.ExternalStorageProvider: void updateVolumesLocked()>
<android.net.wifi.WifiConfiguration: void writeToParcel(Parcel,int)>
<android.telephony.ServiceState: void writeToParcel(Parcel,int)>
<com.android.providers.settings.DatabaseHelper: void loadGlobalSettings(SQLiteDatabase)>
<android.net.wifi.WifiConfiguration: void setSecurityParams(int)>
<com.android.server.locksettings.LockSettingsService: VerifyCredentialResponse verifyTiedProfileChallenge(byte[],int,long,int)>
<com.android.server.notification.ScheduleConditionProvider: void evaluateSubscriptions()>
<com.android.server.am.ActivityStack: void startPausingLocked(boolean,boolean)>
<android.net.wifi.SoftApConfiguration: int hashCode()>
<com.android.server.appop.AppOpsService: int checkOperationUnchecked(int,int,String,boolean)>
<android.telephony.DisconnectCause: String toString(int)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateBackgroundBounds()>
<com.android.server.power.DisplayPowerController: void updateAmbientLux(long)>
<android.net.wifi.SoftApConfiguration.Builder: SoftApConfiguration build()>
<android.net.NetworkStateTracker: void addDefaultRoute()>
<android.net.NetworkIdentity: NetworkIdentity buildNetworkIdentity(Context,NetworkState)>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setMobileDataIndicators(IconState,IconState,int,int,boolean,boolean,int,int,int,int,String,String,boolean,int)>
<com.android.internal.policy.impl.GlobalActions: AlertDialog createDialog()>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void onSucccessfulUnlock()>
<com.android.systemui.statusbar.policy.KeyButtonView: boolean onTouchEvent(MotionEvent)>
<com.android.systemui.qs.QSTile.H: void handleMessage(Message)>
<com.android.server.wm.ActivityStack: int setBounds(Rect)>
<com.android.server.pm.PackageManagerService: ResolveInfo chooseBestActivity(Intent,String,int,List<ResolveInfo>,int)>
<com.android.systemui.screenshot.SaveImageInBackgroundTask: void onPostExecute(Void)>
<com.android.systemui.statusbar.phone.StatusBar.DozeServiceHost: void pulseWhileDozing(PulseCallback,int)>
<com.android.server.location.GnssLocationProvider: void handleUpdateNetworkState(Network)>
<com.android.systemui.statusbar.SignalClusterView.PhoneState: boolean apply(boolean)>
<com.android.server.locksettings.LockSettingsService: VerifyCredentialResponse checkCredential(byte[],int,int,ICheckCredentialProgressCallback)>
<android.net.wifi.WifiConfiguration: int getAuthType()>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void updateBluetooth()>
<com.android.keyguard.KeyguardPINView: void startAppearAnimation()>
<com.android.internal.policy.impl.PhoneWindowManager: void showBootMessage(CharSequence,boolean)>
<com.android.systemui.keyguard.KeyguardViewMediator: void setupLocked()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void processPhonebookAccess()>
<android.net.wifi.WifiInfo: void reset()>
<com.android.server.locksettings.LockSettingsService: void clearUserKeyAuth(int,byte[],byte[])>
<com.android.systemui.classifier.brightline.BrightLineFalsingManager: void cleanup()>
<com.android.server.am.ActivityStartController: int startActivitiesInPackage(int,String,Intent[],String[],IBinder,SafeActivityOptions,int,boolean,PendingIntentRecord)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void onFinishInflate()>
<com.android.systemui.statusbar.phone.MultiUserSwitch: boolean opensUserSwitcherWhenClicked()>
<com.android.server.ConnectivityService: NetworkInfo getActiveNetworkInfo()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: void tick(IBinder,StatusBarNotification,boolean)>
<android.net.wifi.WifiConfiguration: String getSsidAndSecurityTypeString()>
<com.android.keyguard.KeyguardSimPukView.CheckSimPuk: void run()>
<com.android.systemui.qs.QSPanel: void addTile(QSTile<?>)>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: void onBondingStateChanged(int)>
<android.os.Trace: long cacheEnabledTags()>
<com.android.server.BluetoothManagerService: void sendBluetoothServiceUpCallback()>
<com.android.internal.policy.impl.PhoneWindowManager: boolean goHome()>
<com.android.server.audio.AudioService: void setSpeakerphoneOn(boolean)>
<android.location.LocationManager: Location getLastLocation()>
<com.android.keyguard.KeyguardSimPukView: void updateSim()>
<com.android.server.wm.ActivityRecord: void onWindowsGone()>
<com.android.systemui.qs.QSPanel: void updateResources()>
<com.android.systemui.doze.DozeService: void updateNotificationPulse(long)>
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(ProcessRecord,boolean,boolean)>
<com.android.systemui.statusbar.phone.StatusBar.DozeServiceHost: void startDozing()>
<com.android.systemui.statusbar.phone.QuickStatusBarHeader: void updateVisibilities()>
<com.android.systemui.ScreenDecorations: void updateRoundedCornerRadii()>
<android.preference.SeekBarVolumizer.Receiver: void onReceive(Context,Intent)>
<android.media.MediaFile: boolean isAudioFileType(int)>
<android.location.LocationManager: boolean addNmeaListener(NmeaListener)>
<com.android.server.audio.AudioService: void startBluetoothScoInt(IBinder,int)>
<com.android.systemui.statusbar.policy.HeadsUpNotificationView: boolean onTouchEvent(MotionEvent)>
<com.android.systemui.statusbar.phone.QuickSettings: void addTemporaryTiles(ViewGroup,LayoutInflater)>
<com.android.systemui.CornerHandleView: float getOuterRadiusPx()>
<com.android.systemui.statusbar.tablet.TabletStatusBar: void onConfigurationChanged(Configuration)>
<com.android.systemui.keyguard.KeyguardSliceProvider: boolean needsMediaLocked()>
<com.android.keyguard.KeyguardPasswordView: void onResume(int)>
<com.android.server.policy.PhoneWindowManager: boolean layoutNavigationBar(int,int,int,int,int,int,int,Rect,boolean,boolean,boolean,boolean)>
<android.media.AudioManager: void handleKeyUp(KeyEvent,int)>
<android.telephony.RadioAccessFamily: int getNetworkTypeFromRaf(int)>
<android.telephony.SmsManager: int getSmsCapacityOnIcc()>
<com.android.server.wm.ActivityMetricsLogger: void logAppTransitionMultiEvents()>
<com.android.systemui.qs.QSFooterImpl: void handleUpdateState()>
<com.android.server.policy.keyguard.KeyguardStateMonitor: void onShowingStateChanged(boolean)>
<com.android.server.am.ActivityManagerService: boolean handleProcessStartedLocked(ProcessRecord,int,boolean,long,boolean)>
<com.android.server.connectivity.Nat464Xlat: boolean requiresClat(NetworkAgentInfo)>
<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKeyDown(int)>
<com.android.systemui.usb.StorageNotification: void start()>
<com.android.server.ServerThread: void run()>
<com.android.server.BackupManagerService: void restoreAtInstall(String,int)>
<android.content.pm.ActivityInfo: void dump(Printer,String)>
<com.android.systemui.classifier.FalsingManagerProxy: void setupFalsingManager(Context)>
<com.android.server.AppOpsService: int noteOperationUnchecked(int,int,String,int,String)>
<android.app.ContextImpl: Context createConfigurationContext(Configuration)>
<android.telephony.TelephonyManager: int getDefaultSim()>
<com.android.systemui.statusbar.policy.MobileSignalController.MobileState: boolean equals(Object)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setNavigationIconHints(int,boolean)>
<com.android.systemui.statusbar.phone.StatusBarIconController: void loadDimens()>
<android.content.ContentResolver: Uri insert(Uri,ContentValues,Bundle)>
<com.android.server.audio.AudioService: boolean handleDeviceConnection(boolean,int,String,String)>
<com.android.internal.widget.LockPatternUtils: boolean checkPattern(Cell>,int)>
<android.telephony.RadioAccessFamily: int getRafFromNetworkType(int)>
<com.android.settingslib.wifi.WifiUtils: String getVisibilityStatus(AccessPoint)>
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)>
<com.android.server.am.ActiveServices: void killServicesLocked(ProcessRecord,boolean)>
<android.net.wifi.SoftApConfiguration: boolean equals(Object)>
<com.android.ims.internal.uce.common.CapInfo: void readFromParcel(Parcel)>
<com.android.systemui.statusbar.policy.MobileSignalController: void notifyListeners(SignalCallback)>
<android.app.Instrumentation: ActivityResult execStartActivityAsCaller(Context,IBinder,IBinder,Activity,Intent,int,Bundle,boolean,int)>
<com.android.server.wm.ActivityRecord: void completeResumeLocked()>
<com.android.server.PackageManagerService: Package scanPackageLI(File,File,File,Package,int,int)>
<com.android.internal.policy.impl.keyguard.KeyguardViewManager: void maybeCreateKeyguardLocked(boolean,boolean,Bundle)>
<com.android.settingslib.wifi.AccessPoint: String getSecurityString(boolean)>
<android.media.AudioManager: void handleKeyDown(KeyEvent,int)>
<com.android.server.am.ActivityManagerService: ProcessStartResult startProcess(String,String,ProcessRecord,int,int[],int,int,String,String,String,String,long)>
<android.accounts.AccountManager: AccountManagerFuture<Bundle> addAccount(String,String,String[],Bundle,Activity,AccountManagerCallback<Bundle>,Handler)>
<com.android.server.BluetoothManagerService: void unbindBluetoothProfileService(int,IBluetoothProfileServiceConnection)>
<com.android.server.NotificationManagerService.LEDSettingsObserver: void observe()>
<com.android.commands.input.Input: void showUsage()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: void startActivityDismissingKeyguard(Intent,boolean,boolean)>
<com.android.systemui.doze.DozeService: void onDestroy()>
<com.android.server.display.WifiDisplayController: void updateConnection()>
<com.android.internal.policy.impl.PhoneWindowManager: Intent createHomeDockIntent()>
<com.android.server.ConnectivityService: boolean unneeded(NetworkAgentInfo,UnneededFor)>
<com.android.systemui.statusbar.phone.NotificationPanelView: boolean onTouchEvent(MotionEvent)>
<com.android.layoutlib.bridge.android.BridgeResources: XmlResourceParser getXml(int)>
<com.android.systemui.statusbar.phone.DozeParameters: int getPulseInDuration()>
<com.android.server.policy.PhoneWindowManager: long interceptKeyBeforeDispatching(WindowState,KeyEvent,int)>
<android.media.AudioService: void setStreamVolume(int,int,int)>
<com.android.server.policy.PhoneWindowManager: void init(Context,IWindowManager,WindowManagerFuncs)>
<com.android.systemui.ImageWallpaper.GLEngine: void onAmbientModeChanged(boolean,long)>
<com.android.documentsui.DocumentsActivity: void onDocumentPicked(DocumentInfo)>
<com.android.server.om.OverlayManagerSettings: List<OverlayInfo> getOverlaysForTarget(String,int)>
<com.android.keyguard.KeyguardPatternView: void onFinishInflate()>
<com.android.server.devicepolicy.DevicePolicyManagerService: int getStorageEncryptionStatus(String,int)>
<android.media.MediaCodecInfo.VideoCapabilities: void applyLevelLimits()>
<com.android.server.connectivity.KeepaliveTracker: void handleEventSocketKeepalive(NetworkAgentInfo,Message)>
<android.telephony.TelephonyManager: void setDataEnabled(boolean)>
<com.android.internal.hardware.AmbientDisplayConfiguration: boolean alwaysOnAvailable()>
<android.widget.TextView: boolean canSelectText()>
<com.android.server.locksettings.PasswordSlotManager: void markSlotDeleted(int)>
<android.provider.MediaStore.InternalThumbnails: Bitmap getThumbnail(ContentResolver,long,long,int,Options,Uri,boolean)>
<com.android.systemui.globalactions.GlobalActionsDialog: void buildMenuList()>
<com.android.layoutlib.bridge.android.BridgeTypedArray: float getDimension(int,float)>
<android.content.Intent: void prepareToLeaveProcess(boolean)>
<com.android.server.notification.NotificationManagerService: void buzzBeepBlinkLocked(NotificationRecord)>
<com.android.systemui.statusbar.phone.DozeParameters: void dump(PrintWriter)>
<com.android.server.ConnectivityService.NetworkStateTrackerHandler: void maybeHandleNetworkAgentMessage(Message)>
<com.android.server.accounts.AccountManagerService: void removeAccount(IAccountManagerResponse,Account,boolean)>
<com.android.server.content.SyncManager.SyncHandler: long maybeStartNextSyncH()>
<com.android.server.wm.ActivityStack: void startActivityLocked(ActivityRecord,ActivityRecord,boolean,boolean,ActivityOptions)>
<com.android.server.connectivity.Tethering: void enableWifiIpServingLocked(String,int)>
<android.app.ActivityThread: Resources getTopLevelResources(String,CompatibilityInfo,boolean)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void updateWifiStateListeners(boolean)>
<com.android.systemui.statusbar.CommandQueue.H: void handleMessage(Message)>
<android.content.ContentProvider.Transport: int delete(String,Uri,String,String[])>
<com.android.internal.os.ZygoteInit: boolean startSystemServer()>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: void updateProfiles(ParcelUuid[],ParcelUuid[],Collection<LocalBluetoothProfile>,Collection<LocalBluetoothProfile>,boolean,BluetoothDevice)>
<com.android.server.am.ActivityStarter.Request: void reset()>
<com.android.server.audio.AudioService: void setBtScoActiveDevice(BluetoothDevice)>
<com.android.server.wm.ActivityStack: ActivityStack adjustFocusToNextFocusableStack(String,boolean)>
<com.android.internal.os.Zygote: Runnable usapMain(LocalServerSocket,FileDescriptor)>
<com.android.systemui.statusbar.policy.MobileSignalController: void updateTelephony()>
<com.android.systemui.qs.QSTileView: void init(OnClickListener,OnClickListener,OnLongClickListener)>
<android.view.TextureView: void setSurfaceTexture(SurfaceTexture)>
<android.location.LocationManager: void requestLocationUpdates(LocationRequest,PendingIntent)>
<com.android.server.audio.AudioService.ScoClient: void clearCount(boolean)>
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(WindowState,KeyEvent,int)>
<android.media.AudioService.AudioServiceBroadcastReceiver: void onReceive(Context,Intent)>
<com.android.systemui.statusbar.stack.StackScrollAlgorithm: void updateClipping(StackScrollState,StackScrollAlgorithmState)>
<com.android.server.ConnectivityService: void rematchNetworkAndRequests(NetworkAgentInfo,long)>
<com.android.server.Watchdog: void run()>
<com.android.systemui.statusbar.policy.DateView: void updateClock()>
<com.android.server.locksettings.LockSettingsService: long setLockCredentialWithAuthTokenLocked(LockscreenCredential,AuthenticationToken,int)>
<com.android.systemui.statusbar.policy.HotspotControllerImpl: void onNumClientsChanged(int)>
<com.android.layoutlib.bridge.android.BridgeXmlBlockParserTest: void testXmlBlockParser()>
<com.android.systemui.statusbar.phone.SignalDrawable: void draw(Canvas)>
<com.android.internal.policy.impl.LockScreen: void refreshBatteryStringAndIcon()>
<com.android.systemui.statusbar.NotificationShelf: int updateNotificationClipHeight(ActivatableNotificationView,float,int)>
<com.android.server.notification.ZenModeHelper: void applyZenToRingerMode()>
<com.android.systemui.statusbar.policy.MobileSignalController: int getCurrentIconId()>
<com.android.server.display.LocalDisplayAdapter.LocalDisplayDevice: DisplayDeviceInfo getDisplayDeviceInfoLocked()>
<com.android.server.am.ActivityRecord: void reportFullyDrawnLocked(boolean)>
<com.android.networkstack.tethering.Tethering: void interfaceStatusChanged(String,boolean)>
<com.android.layoutlib.bridge.impl.ResourceHelper: ColorStateList getColorStateList(ResourceValue,BridgeContext)>
<com.android.internal.os.ZygoteInit: void preloadClasses()>
<com.android.systemui.statusbar.phone.NotificationPanelView: void onHeightUpdated(float)>
<com.android.systemui.statusbar.phone.PhoneStatusBar: PhoneStatusBarView makeStatusBarView()>
<com.android.internal.policy.impl.GlobalActions: GlobalActionsDialog createDialog()>
<com.android.server.AlarmManagerService.AlarmThread: void run()>
<com.android.server.audio.AudioService: void setBluetoothScoOn(boolean)>
<com.android.server.am.ActivityManagerService: boolean startProcessLocked(ProcessRecord,String,String,boolean,String)>
<com.android.server.BluetoothManagerService: void bluetoothStateChangeHandler(int,int)>
<com.android.server.input.InputManagerService: void start()>
<com.android.internal.telephony.cdma.sms.BearerData: String decode7bitAscii(byte[],int,int)>
<com.android.systemui.volume.VolumeDialog: void updateVolumeRowH(VolumeRow)>
<com.android.server.am.ActivityManagerService: boolean handleProcessStartedLocked(ProcessRecord,ProcessStartResult,long)>
<android.location.LocationManager: void requestLocationUpdates(String,long,float,LocationListener)>
<com.android.server.audio.AudioDeviceInventory: int checkSendBecomingNoisyIntentInt(int,int,int)>
<com.android.server.audio.AudioDeviceBroker: boolean isMessageHandledUnderWakelock(int)>
<com.android.systemui.statusbar.policy.NetworkControllerBaseTest: void verifyLastMobileDataIndicators(boolean,int,int)>
<com.android.server.am.ProcessList: void updateOomLevels(int,int,boolean)>
<android.location.LocationManager: void requestLocationUpdates(LocationRequest,LocationListener,Looper,PendingIntent)>
<com.android.keyguard.PasswordTextView: void append(char)>
<com.android.server.display.DisplayManagerService: void startWifiDisplayScanLocked(CallbackRecord)>
<com.android.systemui.statusbar.policy.MobileSignalController.MobileState: void copyFrom(State)>
<com.android.settingslib.wifi.WifiTracker: void updateAccessPoints(List<ScanResult>,List<WifiConfiguration>)>
<android.telephony.SignalStrength: int getLevel()>
<com.android.keyguard.KeyguardHostView: void cleanUp()>
<com.android.server.display.AutomaticBrightnessController: int clampScreenBrightness(int)>
<com.android.server.ConnectivityService: void handleDisconnect(NetworkInfo)>
<android.media.session.MediaSession.CallbackMessageHandler: void handleMessage(Message)>
<com.android.internal.location.GpsNetInitiatedHandler: boolean getInEmergency()>
<android.location.LocationManager: boolean addGpsStatusListener(Listener)>
<android.net.SSLCertificateSocketFactory: Socket createSocket(Socket,String,int,boolean)>
<com.android.server.pm.PackageManagerService: boolean getPackageSizeInfoLI(String,int,PackageStats)>
<android.location.LocationManager: void requestSingleUpdate(Criteria,PendingIntent)>
<com.android.server.connectivity.NetworkNotificationManager: void showNotification(int,NotificationType,NetworkAgentInfo,NetworkAgentInfo,PendingIntent,boolean)>
<com.android.server.NotificationManagerService: void updateLightsLocked()>
<android.telephony.SignalStrength: int getAsuLevel()>
<com.android.systemui.statusbar.phone.NotificationPanelView: boolean shouldQuickSettingsIntercept(float,float,float)>
<android.location.LocationManager: void requestLocationUpdates(String,long,float,LocationListener,Looper)>
<com.android.systemui.screenshot.GlobalScreenshot: void takeScreenshot(Runnable,boolean,boolean)>
<com.android.server.AppOpsService: Op getOpLocked(Ops,int,boolean)>
<com.android.systemui.statusbar.policy.MobileSignalController: void dump(PrintWriter)>
<com.android.systemui.statusbar.phone.NotificationPanelView: boolean canCameraGestureBeLaunched(boolean,int)>
<com.android.server.am.ActivityManagerService.LocalService: void killForegroundAppsForUser(int)>
<com.android.settingslib.wifi.AccessPoint: String securityToString(int,int)>
<android.provider.Settings.System: boolean putStringForUser(ContentResolver,String,String,int)>
<com.android.documentsui.DocumentsActivity: boolean onPrepareOptionsMenu(Menu)>
<com.android.systemui.statusbar.policy.BatteryControllerImpl: void onReceive(Context,Intent)>
<com.android.server.pm.PackageManagerService: void loadPrivatePackagesInner(VolumeInfo)>
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void updateTargets()>
<com.android.server.connectivity.Tethering: int ifaceNameToType(String)>
<com.android.server.ConnectivityService: String getMobileProvisioningUrl()>
<com.android.settingslib.wifi.AccessPoint: int getSecurity(ScanResult)>
<com.android.ims.internal.uce.common.CapInfo: void writeToParcel(Parcel,int)>
<com.android.server.audio.AudioDeviceBroker: void setBluetoothScoOnByApp(boolean)>
<android.view.KeyEvent: boolean isWakeKey(int)>
<com.android.internal.policy.impl.PhoneWindow.DecorView: boolean fitSystemWindows(Rect)>
<android.telecom.Call.Details: String capabilitiesToString(int)>
<android.content.ContentProvider.Transport: ContentProviderResult[] applyBatch(String,ArrayList<ContentProviderOperation>)>
<android.media.SoundPool: boolean isRestricted()>
<android.location.LocationManager: void requestLocationUpdates(LocationRequest,LocationListener,Looper)>
<com.android.systemui.statusbar.phone.NavigationBarView: void dump(FileDescriptor,PrintWriter,String[])>
<com.google.android.mms.pdu.PduParser: boolean parsePartHeaders(ByteArrayInputStream,PduPart,int)>
<com.android.systemui.statusbar.policy.MobileSignalController.MobileState: void toString(StringBuilder)>
<com.android.keyguard.CarrierText: String getAirplaneModeMessage()>
<com.android.server.wm.WindowState: void reportResized()>
<com.android.documentsui.DocumentsActivity: void updateActionBar()>
<android.service.carrier.CarrierIdentifier: boolean equals(Object)>
<android.app.ContextImpl: Context createDisplayContext(Display)>
<android.telephony.ServiceState: void setNullState(int)>
<android.hardware.camera2.CameraManager.CameraManagerGlobal: String[] getCameraIdList()>
<com.android.layoutlib.bridge.android.BridgeTypedArray: ColorStateList getColorStateList(int)>
<com.android.server.AppOpsService: void resetAllModes()>
<com.android.server.policy.PhoneWindowManager: int selectAnimationLw(WindowState,int)>
<com.android.server.am.ActiveServices: boolean scheduleServiceRestartLocked(ServiceRecord,boolean)>
<android.location.LocationManager: void requestLocationUpdates(long,float,Criteria,PendingIntent)>
<com.android.server.LocationManagerService: void applyRequirementsLocked(String)>
<com.android.server.pm.PackageManagerService: Package scanPackageDirtyLI(Package,int,int,long,UserHandle)>
<com.android.systemui.statusbar.StatusBarIconView: boolean set(StatusBarIcon,boolean)>
<com.android.server.AppOpsService: int startOperation(IBinder,int,int,String)>
<com.android.systemui.statusbar.policy.MobileSignalController: void mapIconSets()>
<android.widget.PopupWindow: int computeGravity()>
<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,String,Bundle)>
<com.android.server.NotificationManagerService: void enqueueNotificationInternal(String,int,int,String,int,Notification,int[],int)>
<com.android.server.wm.ActivityStarter: void addOrReparentStartingActivity(TaskRecord,String)>
<com.android.server.pm.PackageManagerService: void verifyIntentFiltersIfNeeded(int,int,boolean,Package)>
<com.android.internal.os.BatteryStatsImpl: void updateKernelWakelocksLocked()>
<com.android.systemui.usb.StorageNotification: void onStorageStateChangedAsync(String,String,String)>
<android.util.NtpTrustedTime: boolean forceSync()>
<com.android.systemui.statusbar.phone.ScrimController: void onFinished(Callback)>
<com.android.systemui.statusbar.phone.QuickStatusBarHeader: void onClick(View)>
<com.android.server.wm.ActivityStackSupervisor: void goingToSleepLocked()>
<com.android.systemui.qs.QSFooter: void setQSPanel(QSPanel)>
<com.android.server.am.ActivityManagerService: int startActivityAsCaller(IApplicationThread,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle,boolean,int)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setNavigationIconHints(int,int,boolean)>
<com.android.server.am.PendingIntentRecord: int sendInner(int,Intent,String,IBinder,IIntentReceiver,String,IBinder,String,int,int,int,Bundle)>
<com.android.server.audio.BtHelper: boolean handleBtScoActiveDeviceChange(BluetoothDevice,boolean)>
<com.android.server.usage.UsageStatsService: void onBootPhase(int)>
<com.android.server.wm.WindowManagerService: float getCurrentAnimatorScale()>
<com.android.keyguard.KeyguardUpdateMonitor: void handleServiceStateChange(int,ServiceState)>
<android.graphics.drawable.InsetDrawable: boolean getPadding(Rect)>
<com.android.documentsui.DocumentsActivity: boolean onOptionsItemSelected(MenuItem)>
<com.android.server.am.ActivityManagerService: void checkExcessivePowerUsageLocked()>
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)>
<com.android.server.AlarmManagerService: boolean triggerAlarmsLocked(ArrayList<Alarm>,long,long)>
<com.android.server.BluetoothManagerService: boolean enable(String)>
<com.android.server.wm.TaskChangeNotificationController.MainHandler: void handleMessage(Message)>
<android.service.carrier.CarrierIdentifier: int hashCode()>
<android.telephony.TelephonyManager: int getPhoneType(int)>
<com.android.systemui.statusbar.phone.PhoneStatusBarPolicy: void updateVolumeZen()>
<com.android.server.wm.ActivityStack: String toString()>
<com.android.settingslib.bluetooth.CachedBluetoothDevice: String getConnectionSummary(boolean)>
<com.android.server.audio.AudioService: void avrcpSupportsAbsoluteVolume(String,boolean)>
<com.android.layoutlib.bridge.android.BridgeContext: TypedArray obtainStyledAttributes(AttributeSet,int[],int,int)>
<android.content.pm.PackageInfo: void writeToParcel(Parcel,int)>
<com.android.server.locksettings.LockSettingsService: AuthenticationToken initializeSyntheticPasswordLocked(byte[],byte[],int,int,int)>
<com.android.systemui.statusbar.phone.StatusBarHeaderView: void captureLayoutValues(LayoutValues)>
<android.media.AudioService: void onCheckMusicActive()>
<com.android.systemui.statusbar.phone.StatusBar: void onCameraLaunchGestureDetected(int)>
<com.android.server.am.BroadcastQueue: void deliverToRegisteredReceiverLocked(BroadcastRecord,BroadcastFilter,boolean)>
<com.android.systemui.doze.DozeSensors.ProxSensor: void setRegistered(boolean)>
<com.android.internal.policy.impl.GlobalActions: void prepareDialog()>
<com.android.systemui.statusbar.policy.FlashlightController: void setFlashlight(boolean)>
<com.android.server.am.ActivityStack: void completePauseLocked(boolean,ActivityRecord)>
<com.android.server.audio.AudioService: boolean isBluetoothScoOn()>
<com.android.internal.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,String,boolean,byte[],int)>
<com.android.server.audio.AudioService: void checkScoAudioState()>
<com.android.settingslib.wifi.AccessPoint: boolean matches(WifiConfiguration)>
<com.android.systemui.qs.QSFooterImpl: void setNoSims(boolean,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarFragment: void setCurrentSysuiVisibility(int)>
<com.android.server.LocationManagerService: void handleLocationChanged(Location,boolean)>
<android.widget.AbsListView: View obtainView(int,boolean[])>
<com.android.systemui.appops.AppOpsControllerTest: void setUp()>
<com.android.systemui.statusbar.policy.WifiSignalController: void notifyListeners(SignalCallback)>
<com.android.systemui.screenshot.SaveImageInBackgroundTask: SaveImageInBackgroundData doInBackground(SaveImageInBackgroundData)>
<com.android.server.fingerprint.FingerprintService.FingerprintServiceWrapper: void cancelAuthentication(IBinder,String)>
<com.android.systemui.statusbar.SignalClusterView: void setWifiIndicators(boolean,IconState,IconState,boolean,boolean,String,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarTransitions: void applyMode(int,boolean,boolean)>
<android.permission.PermissionControllerManager: void grantOrUpgradeDefaultRuntimePermissions(Executor,Consumer<Boolean>)>
<com.android.systemui.statusbar.policy.NetworkController.SignalCallback: void setNoSims(boolean)>
<com.android.layoutlib.bridge.impl.RenderAction: void tearDown()>
<com.android.internal.policy.impl.keyguard.KeyguardSelectorView: void updateResources()>
<com.android.systemui.doze.DozeService: void requestPulse()>
<com.android.settingslib.wifi.AccessPoint: int getSecurity(WifiConfiguration)>
<android.util.NtpTrustedTime: NtpTrustedTime getInstance(Context)>
<com.android.server.AppOpsService: int noteOperation(int,int,String)>
<com.android.keyguard.KeyguardHostView: void showAppropriateWidgetPage()>
<com.android.systemui.doze.DozeScreenBrightness: void updateBrightnessAndReady(boolean)>
<com.android.systemui.qs.tiles.HotspotTile: void handleUpdateState(BooleanState,Object)>
<com.android.server.display.ColorFade: boolean captureScreenshotTextureAndSetViewport()>
<com.android.server.audio.AudioDeviceBroker: void setBluetoothScoOn(boolean,String)>
<com.android.systemui.statusbar.phone.StatusBar: void updateTheme()>
<com.android.server.pm.PackageVerificationState: boolean isVerificationComplete()>
<android.media.AudioService: void onNewPlaybackInfoForRcc(int,int,int)>
<com.android.server.am.ActiveServices: void performServiceRestartLocked(ServiceRecord)>
<com.android.server.locksettings.LockSettingsService: byte[] secretFromCredential(byte[])>
<android.app.ActivityThread: ActivityThread currentActivityThread()>
<com.android.server.accounts.AccountManagerService.Session: boolean checkKeyIntent(int,Intent)>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayoutTest: void setUp()>
<com.android.systemui.statusbar.policy.NetworkControllerImpl.Config: Config readConfig(Context)>
<com.android.server.accessibility.UiAutomationManager: void destroyUiAutomationService()>
<com.android.server.ConnectivityService: void rematchNetworkAndRequests(NetworkAgentInfo,ReapUnvalidatedNetworks,long)>
<android.app.ActivityThread: boolean attachThemeAssets(AssetManager,CustomTheme,boolean)>
<com.android.systemui.statusbar.phone.StatusBar: NavigationBarView getNavigationBarView()>
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(Cell>,String,int)>
<android.webkit.BrowserFrame: void handleMessage(Message)>
<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(int,int,DisplayContent)>
<com.android.systemui.statusbar.phone.PhoneStatusBar: void userSwitched(int)>
<com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TetheredState: boolean processMessage(Message)>
<com.android.systemui.recents.ScreenPinningRequest.RequestWindowView: void inflateView(boolean)>
<com.android.server.wm.ScreenRotationAnimation: void setRotationInTransaction(int)>
<com.android.systemui.statusbar.phone.PanelView: boolean isFalseTouch(float,float)>
<com.android.systemui.statusbar.phone.KeyguardStatusBarView: void updateVisibilities()>
<com.android.settingslib.bluetooth.A2dpProfile: void setHighQualityAudioEnabled(BluetoothDevice,boolean)>
<com.android.server.BluetoothManagerService.BluetoothHandler: void handleMessage(Message)>
<com.android.settingslib.dream.DreamBackend: void launchSettings(DreamInfo)>
<com.android.systemui.statusbar.notification.collection.NotificationEntry: boolean isBubble()>
<com.android.server.BluetoothManagerService: int updateBleAppCount(IBinder,boolean,String)>
<com.android.server.ConnectivityService: void handleRegisterNetworkRequest(Message)>
<android.location.LocationManager: void requestSingleUpdate(String,LocationListener,Looper)>
<com.android.server.audio.AudioService.ScoClient: void incCount(int)>
<com.android.server.am.ActivityStarter: int startActivityUnchecked(ActivityRecord,ActivityRecord,IVoiceInteractionSession,IVoiceInteractor,int,boolean,ActivityOptions,TaskRecord,ActivityRecord[])>
<com.android.server.display.LocalDisplayAdapter.LocalDisplayDevice: boolean updateAllowedModesInternalLocked(int[])>
<com.android.server.wm.ActivityRecord: void onWindowsVisible()>
<com.android.systemui.statusbar.SignalClusterView.PhoneState: void setViews(ViewGroup)>
<android.media.AudioSystem: String getOutputDeviceName(int)>
<android.telecom.Call.Details: String propertiesToString(int)>
<android.accounts.AccountManager.GetAuthTokenByTypeAndFeaturesTask: void doWork()>
<com.android.systemui.statusbar.policy.MobileSignalController: void handleBroadcast(Intent)>
<com.android.server.NativeDaemonConnector: void listenToSocket()>
<com.android.server.am.ActivityManagerService.PidMap: void put(ProcessRecord)>
<android.content.res.Resources: void updateConfiguration(Configuration,DisplayMetrics,CompatibilityInfo)>
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(KeyEvent,int)>
<android.view.InsetsSourceConsumer: void setControl(InsetsSourceControl,int[],int[])>
<com.android.server.locksettings.LockSettingsService: void spBasedSetLockCredentialInternalLocked(byte[],int,byte[],int,int,boolean,boolean)>
<com.android.systemui.statusbar.phone.KeyguardBottomAreaView: void inflateCameraPreview()>
<com.android.systemui.qs.QSFooter: void setExpansion(float)>
<com.android.server.pm.PackageManagerService: PermissionInfo getPermissionInfo(String,String,int)>
<android.net.wifi.SoftApConfiguration: String toString()>
<com.android.systemui.BatteryMeterView: void onAttachedToWindow()>
<com.android.server.locksettings.LockSettingsService: byte[] enrollCredential(byte[],byte[],byte[],int)>
<com.android.server.am.ActivityManagerService: void bringDownServiceLocked(ServiceRecord,boolean)>
<com.android.systemui.BatteryMeterView: void updateShowPercent()>
<com.android.server.audio.AudioService: void disconnectBluetoothSco(int)>
<com.android.systemui.statusbar.phone.StatusBarHeaderView: void applyLayoutValues(LayoutValues)>
<com.android.settingslib.wifi.AccessPointPreference: void bindFrictionImage(ImageView)>
<com.android.systemui.statusbar.stack.StackScrollAlgorithm: void initConstants(Context)>
<com.android.server.wm.ScreenRotationAnimation: void kill()>
<android.widget.Toast.TN: void handleShow()>
<com.android.systemui.statusbar.phone.PhoneStatusBar: void dump(FileDescriptor,PrintWriter,String[])>
<android.net.wifi.WifiManager.SoftApCallbackProxy: void onStaConnected(String,int)>
<android.util.NtpTrustedTime: boolean forceRefresh()>
<com.android.server.locksettings.LockSettingsService: void tryDeriveAuthTokenForUnsecuredPrimaryUser(int)>
<com.android.systemui.qs.QSFooter: void setKeyguardShowing(boolean)>
<com.android.server.audio.AudioService: boolean disconnectBluetoothScoAudioHelper(BluetoothHeadset,BluetoothDevice,int)>
<com.android.server.locksettings.SyntheticPasswordManager: VerifyCredentialResponse verifyFrpCredential(IGateKeeperService,byte[],int,ICheckCredentialProgressCallback)>
<com.android.systemui.statusbar.phone.PhoneStatusBar: void updateDozingState()>
<com.android.providers.settings.DatabaseHelper: void onUpgrade(SQLiteDatabase,int,int)>
<com.android.server.audio.BtHelper.ScoClient: void decCount()>
<com.android.systemui.qs.QSFragment: void onViewCreated(View,Bundle)>
<com.android.systemui.statusbar.policy.NetworkControllerBaseTest: void verifyLastMobileDataIndicators(boolean,int,int,boolean,boolean)>
<com.android.server.am.OomAdjuster: void updateOomAdjLocked(String)>
<com.android.keyguard.KeyguardPasswordView: void afterTextChanged(Editable)>
<com.android.systemui.statusbar.phone.StatusBar: void start()>
<android.telephony.TelephonyManager: boolean isDataEnabled()>
<com.android.server.wm.ActivityStackSupervisor: void setWindowManager(WindowManagerService)>
<com.android.server.wallpaper.WallpaperManagerService: void switchUser(int,IRemoteCallback)>
<com.android.internal.policy.impl.keyguard.KeyguardTransportControlView: void updatePlayPauseState(int)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,PendingIntent)>
<com.android.systemui.statusbar.phone.StatusBar: void onKeyguardOccludedChanged(boolean)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<com.android.internal.policy.DecorView: void setBackgroundDrawable(Drawable)>
<com.android.server.am.ActivityManagerService: WaitResult startActivityAndWait(IApplicationThread,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle,int)>
<com.android.documentsui.DocumentsActivity: void onCreate(Bundle)>
<com.android.server.connectivity.Tethering: void interfaceStatusChanged(String,boolean)>
<com.android.systemui.statusbar.policy.MobileSignalController.MobilePhoneStateListener: void onServiceStateChanged(ServiceState)>
<com.android.systemui.doze.DozeService: void onCreate()>
<com.android.server.pm.PackageManagerService.InstallParams: int sendPackageVerificationRequest(int,PackageInfoLite,PackageVerificationState)>
<com.android.systemui.keyguard.KeyguardSliceProvider: void onMetadataOrStateChanged(MediaMetadata,int)>
<android.telephony.ServiceState: String toString()>
<com.android.internal.policy.impl.keyguard.KeyguardHostView: void cleanupAppWidgetIds()>
<com.android.layoutlib.bridge.android.BridgeResources: XmlResourceParser getLayout(int)>
<android.telephony.ServiceState: void copyFrom(ServiceState)>
<android.service.carrier.CarrierIdentifier: void writeToParcel(Parcel,int)>
<com.android.server.notification.NotificationManagerService.SettingsObserver: void update(Uri)>
<com.android.server.am.ActivityManagerService: Configuration getConfiguration()>
<android.media.AudioService: void onConfigureSafeVolume(boolean)>
<com.android.server.connectivity.Tethering: void maybeTrackNewInterfaceLocked(String,int)>
<com.android.keyguard.CarrierText: void updateCarrierText()>
<com.android.internal.policy.impl.PhoneWindowManager: void init(Context,IWindowManager,WindowManagerFuncs)>
<com.android.server.audio.AudioService: int checkSendBecomingNoisyIntent(int,int,int)>
<com.android.server.am.ActivityManagerService: void appDiedLocked(ProcessRecord,int,IApplicationThread,boolean)>
<com.android.server.audio.AudioService: void setBluetoothScoOnInt(boolean,String)>
<android.net.apf.ApfFilter.Ra: long uint32(int)>
<android.app.ActivityThread: Resources getTopLevelResources(String,CompatibilityInfo)>
<com.android.systemui.globalactions.GlobalActionsDialog.ActionsDialog: void updateList(boolean)>
<com.android.systemui.statusbar.phone.QuickSettings: void addTiles(ViewGroup,LayoutInflater,boolean)>
<com.android.server.wm.WindowManagerService: ApplicationDisplayMetrics updateApplicationDisplayMetricsLocked(DisplayContent)>
<com.android.server.pm.PackageManagerService: boolean createIdmapForPackagePairLI(Package,Package)>
<com.android.server.wm.ActivityStack: ActivityRecord finishCurrentActivityLocked(ActivityRecord,int,boolean,String)>
<com.android.server.audio.AudioService: void startBluetoothScoInt(IBinder,int,String)>
<android.bluetooth.BluetoothAdapter: int getState()>
<com.android.server.pm.PackageManagerService: void performBootDexOpt()>
<com.android.systemui.statusbar.policy.CallbackHandlerTest: void testSignalCallback_setMobileDataIndicators()>
<com.android.keyguard.KeyguardSimPinView: void onFinishInflate()>
<com.android.server.pm.PackageManagerService.InstallParams: void handleStartCopy()>
<com.android.server.PowerManagerService: void userActivity(long,boolean,int,boolean)>
<com.android.systemui.statusbar.phone.ScrimController: void updateScrims()>
<com.android.documentsui.DocumentsActivity.ExistingFinishTask: void onPostExecute(Void)>
<com.android.settingslib.bluetooth.LocalBluetoothProfileManager: void updateLocalProfiles()>
<android.accounts.AccountManager: AccountManagerFuture<Boolean> removeAccount(Account,AccountManagerCallback<Boolean>,Handler)>
<com.android.systemui.util.sensors.AsyncSensorManager: boolean registerListenerImpl(SensorEventListener,Sensor,int,Handler,int,int)>
<com.android.systemui.ImageWallpaper.DrawableEngine: void drawFrame()>
<android.net.wifi.SoftApConfiguration: void writeToParcel(Parcel,int)>
<com.android.server.audio.AudioDeviceInventory: void makeA2dpDeviceAvailable(String,String,String,int)>
<com.android.server.power.PowerManagerService: void systemReady(IAppOpsService)>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendMultipartText(String,String,ArrayList<String>,ArrayList<PendingIntent>,ArrayList<PendingIntent>)>
<android.view.ViewRootImpl: void draw(boolean)>
<android.telephony.ServiceState: boolean equals(Object)>
<com.android.keyguard.KeyguardHostView: void onRestoreInstanceState(Parcelable)>
<com.android.server.audio.AudioDeviceBroker.BrokerHandler: void handleMessage(Message)>
<com.android.systemui.appops.AppOpsControllerImpl: void notifySuscribers(int,int,String,boolean)>
<com.android.systemui.statusbar.phone.QuickStatusBarHeader: void startClockActivity(AlarmClockInfo)>
<com.android.systemui.statusbar.phone.NotificationPanelView: void onStateChanged(int)>
<android.graphics.drawable.InsetDrawable: void onBoundsChange(Rect)>
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,BluetoothProfile)>
<com.android.internal.telephony.gsm.SmsMessage: SubmitPdu getSubmitPdu(String,String,String,boolean,byte[])>
<com.android.systemui.statusbar.SignalClusterView.PhoneState: void setIconTint(int,float,Rect)>
<com.android.server.audio.AudioService.AudioHandler: void handleMessage(Message)>
<android.telephony.SignalStrength: int getDbm()>
<com.android.systemui.qs.QSCarrierGroupControllerTest: void testSetMobileDataIndicators_invalidSim()>
<com.android.systemui.volume.VolumeDialogImpl: void updateVolumeRowH(VolumeRow)>
<com.android.systemui.qs.QSCarrierGroupTest: void testSetMobileDataIndicators_invalidSim()>
<com.android.server.audio.AudioService: void onSystemReady()>
<android.bluetooth.BluetoothAdapter: boolean enableBLE()>
<com.android.server.pm.PackageManagerService: void updateSettingsInternalLI(Package,String,int[],int[],PackageInstalledInfo,UserHandle,int)>
<com.android.systemui.statusbar.phone.StatusBar.DozeServiceHost: void extendPulse(int)>
<com.android.internal.policy.impl.PhoneWindowManager: void beginLayoutLw(boolean,int,int,int)>
<android.net.ip.IpServer: boolean configureIPv4(boolean)>
<com.android.systemui.statusbar.policy.MobileSignalController: boolean isRoaming()>
<com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout: void updateClipping()>
<com.android.server.audio.BtHelper.ScoClient: boolean requestScoState(int,int)>
<com.android.server.am.ActivityStackSupervisor: void acquireAppLaunchPerfLock(ActivityRecord)>
<com.android.server.ConnectivityService: String getMobileRedirectedProvisioningUrl()>
<com.android.server.audio.AudioService: void startBluetoothSco(IBinder,int)>
<com.android.keyguard.KeyguardPINView: void onFinishInflate()>
<com.android.server.am.ActivityManagerService: int startActivityAsUser(IApplicationThread,String,Intent,String,IBinder,String,int,int,ProfilerInfo,Bundle,int)>
<com.android.server.audio.AudioDeviceBroker: boolean isSpeakerphoneOn()>
<com.android.server.net.NetworkStatsSubscriptionsMonitor: void onSubscriptionsChanged()>
<com.android.server.wm.ActivityStackSupervisor: boolean shutdownLocked(int)>
<com.android.systemui.statusbar.SignalClusterView: void onAttachedToWindow()>
<com.android.server.am.ActivityStack: boolean startPausingLocked(boolean,boolean,ActivityRecord,boolean)>
<com.android.server.audio.AudioService.ScoClient: void decCount()>
<com.android.systemui.statusbar.phone.NavigationBarView: void reorient()>
<com.android.server.AlarmManagerService: void rescheduleKernelAlarmsLocked()>
<com.android.systemui.doze.DozeFactory: DozeMachine assembleMachine(DozeService)>
<com.android.server.am.ActivityManagerService: void updateOomAdjLocked()>
<android.location.LocationManager: void requestLocationUpdates(String,long,float,PendingIntent)>
<com.android.keyguard.CarrierText: String getMissingSimMessage()>
<com.android.systemui.globalactions.GlobalActionsDialog: ActionsDialog createDialog()>
<android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumberInternal(int,String,Context,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: void updateIcons(Context,Configuration,Configuration)>
<com.android.server.display.WifiDisplayController: void updateWfdEnableState()>
<com.android.keyguard.KeyguardSimPinView.CheckSimPin: void run()>
<com.android.systemui.statusbar.phone.StatusBar.DozeServiceHost: void stopDozing()>
<com.android.systemui.statusbar.phone.NotificationPanelView: void launchCamera(boolean,int)>
<com.android.systemui.volume.VolumeDialog: void trimObsoleteH()>
<com.android.server.NetworkTimeUpdateService: void systemRunning()>
<com.android.server.am.ActiveServices: void realStartServiceLocked(ServiceRecord,ProcessRecord,boolean)>
<com.android.server.display.AutomaticBrightnessController: void handleLightSensorEvent(long,float)>
<com.android.server.locksettings.SyntheticPasswordManager: AuthenticationToken newSyntheticPasswordAndSid(IGateKeeperService,byte[],byte[],int)>
<com.android.internal.widget.LockPatternView: void onDraw(Canvas)>
<com.android.systemui.statusbar.policy.NetworkControllerBaseTest: void verifyLastQsMobileDataIndicators(boolean,int,int,boolean,boolean)>
<android.net.wifi.WifiManager: String getCountryCode()>
<com.android.systemui.statusbar.phone.StatusBar: void makeStatusBarView()>
<com.android.server.BluetoothManagerService: boolean disable(String,boolean)>
<android.net.wifi.WifiStateMachine.DriverStartedState: boolean processMessage(Message)>
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(Context,ServiceListener,int)>
<com.android.server.audio.AudioDeviceBroker: boolean isBluetoothScoOnForApp()>
<com.android.server.policy.PhoneWindowManager: int interceptKeyBeforeQueueing(KeyEvent,int)>
<com.android.server.am.ActivityManagerService: int startActivities(IApplicationThread,String,Intent[],String[],IBinder,Bundle,int)>
<android.telecom.Connection: String capabilitiesToString(int)>
<android.telecom.Connection: String capabilitiesToStringInternal(int,boolean)>
<android.accounts.AccountManager: AccountManagerFuture<Bundle> removeAccount(Account,Activity,AccountManagerCallback<Bundle>,Handler)>
<android.telephony.ServiceState: String rilRadioTechnologyToString(int)>
<android.location.LocationManager: void requestSingleUpdate(Criteria,LocationListener,Looper)>
<android.telecom.Phone: void internalAddCall(ParcelableCall)>
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)>
<android.net.dhcp.DhcpPacket: ByteBuffer buildDiscoverPacket(int,int,short,byte[],boolean,byte[])>
<com.android.systemui.statusbar.policy.NetworkControllerImpl: void dispatchDemoCommand(String,Bundle)>
<com.android.settingslib.bluetooth.A2dpProfile: String getHighQualityAudioOptionLabel(BluetoothDevice)>
<com.android.server.ConnectivityServiceTest: void testPrivateDnsSettingsChange()>
<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(NetworkPolicy,int,long,ApplicationInfo)>
<com.android.server.locksettings.LockSettingsService: VerifyCredentialResponse verifyCredential(byte[],int,long,int)>
<com.android.server.LocationManagerService: void loadProvidersLocked()>
<com.android.systemui.statusbar.phone.StatusBar: void makeStatusBarView(RegisterStatusBarResult)>
<com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm: void updatePulsingStates(StackScrollAlgorithmState,AmbientState)>
<android.net.wifi.WifiStateTracker: void requestConnectionStatus(WifiInfo)>
<com.android.server.wm.ActivityMetricsLogger: void notifyActivityLaunched(int,ActivityRecord,boolean,boolean)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: ArrayList<ApnSetting> buildWaitingApns(String)>
<com.android.internal.policy.impl.PhoneWindowManager: void startDockOrHome()>
<com.android.systemui.statusbar.policy.MobileSignalController.MobilePhoneStateListener: void onDataConnectionStateChanged(int,int)>
<com.android.server.BluetoothManagerService: void onBluetoothGattServiceUp()>
<com.android.server.backup.BackupManagerService: IBackupAgent bindToAgentSynchronous(ApplicationInfo,int)>
<com.android.server.audio.AudioService: void setMode(int,IBinder,String)>
<com.android.systemui.ScreenDecorations: void onConfigurationChanged(Configuration)>
<com.android.systemui.statusbar.phone.NotificationPanelView: boolean onInterceptTouchEvent(MotionEvent)>
<com.android.server.am.ActivityManagerService: int startActivityWithConfig(IApplicationThread,String,Intent,String,IBinder,String,int,int,Configuration,Bundle,int)>
<com.android.systemui.statusbar.policy.NetworkController: void refreshViews()>
<android.text.format.DateUtils: String formatElapsedTime(StringBuilder,long)>
<com.android.systemui.qs.QSFooter: View getExpandView()>
<com.android.systemui.statusbar.BaseStatusBar: boolean shouldInterrupt(StatusBarNotification)>
<com.android.systemui.statusbar.StatusBarPolicy: void updateConnectivity(Intent)>
<com.android.server.WiredAccessoryManager: void notifyWiredAccessoryChanged(long,int,int)>
<com.android.server.WiredAccessoryManager: void setDeviceStateLocked(int,int,int,String)>
<com.android.server.am.ActivityManagerService: boolean applyOomAdjLocked(ProcessRecord,boolean,long,long)>
<com.android.systemui.statusbar.NotificationShelf: void setIconTransformationAmount(ExpandableNotificationRow,float,float,boolean,boolean)>
<com.android.server.ConnectivityService.NetworkStateTrackerHandler: void handleMessage(Message)>
<com.android.systemui.qs.QSFragment: void setQsExpansion(float,float)>
<com.android.internal.policy.impl.keyguard.KeyguardMessageArea: CharSequence getChargeInfo(MutableInt)>
<com.android.systemui.statusbar.policy.BatteryController: void onReceive(Context,Intent)>
<com.android.server.pm.PackageManagerService: int deletePackageX(String,int,int)>
<com.android.server.connectivity.Tethering.TetherMasterSM: void setUpstreamNetwork(NetworkState)>
<android.location.LocationManager: Location getLastKnownLocation(String)>
<com.android.server.audio.AudioService: boolean connectBluetoothScoAudioHelper(BluetoothHeadset,BluetoothDevice,int)>
<com.android.server.power.PowerManagerService: void readConfigurationLocked()>
<com.android.server.am.ActivityManagerService.PidMap: void remove(ProcessRecord)>
<android.content.pm.PackageParser: PackageInfo generatePackageInfo(Package,int[],int,long,long)>
<com.android.server.wm.WindowManagerService: Bitmap screenshotApplications(IBinder,int,int,int)>
<com.android.systemui.statusbar.phone.SettingsPanelView: void onFinishInflate()>
<com.android.internal.os.BatteryStatsImpl.Uid.Wakelock: void readFromParcelLocked(TimeBase,TimeBase,Parcel)>
<com.android.server.pm.PackageManagerService: Package scanPackageLI(Package,int,int,long,UserHandle)>
<android.media.AudioSystem: int audioFormatToBluetoothSourceCodec(int)>
<com.android.server.power.ElectronBeam: boolean prepare(int)>
<com.android.server.LocationManagerService: void initializeProvidersLocked()>
<com.android.systemui.statusbar.stack.NotificationStackScrollLayout: void updateBackgroundDimming()>
<com.android.server.wm.WindowManagerService: int addWindow(Session,IWindow,int,LayoutParams,int,int,Rect,Rect,Rect,Rect,ParcelableWrapper,InputChannel)>
<com.android.systemui.qs.QSFooter: void setExpanded(boolean)>
<com.android.server.MountService: int encryptStorageExtended(int,String,boolean)>
<com.android.systemui.statusbar.phone.NavigationBarView: void setDisabledFlags(int,boolean)>
<com.android.server.am.ActivityManagerService: boolean isGetTasksAllowed(String,int,int)>
<com.android.server.ServerThread: void initAndLoop()>
<com.android.systemui.statusbar.phone.PanelView: void flingToHeight(float,boolean,float,float,boolean)>
<android.telephony.ServiceState: void fillInNotifierBundle(Bundle)>
<com.android.systemui.qs.QSTileView: void setDual(boolean)>
<android.net.sip.SipProfile.Builder: SipProfile build()>
<com.android.systemui.statusbar.phone.PanelView.FlingTracker: void computeCurrentVelocity(long)>
<com.android.server.am.ActivityRecord: void reportLaunchTimeLocked(long)>
<com.android.server.wm.ActivityStarter: int setTaskFromSourceRecord()>
<android.net.wifi.WifiInfo: String toString()>
<com.android.systemui.qs.QSContainerImpl: void updateExpansion()>
<com.android.server.wm.WindowAnimator: void updateWindowsLocked(int)>
<com.android.server.ConnectivityService: void systemReady()>
<com.android.server.policy.PhoneWindowManager: int rotationForOrientationLw(int,int)>
<com.android.server.am.ActivityStackSupervisor: void findTaskToMoveToFront(TaskRecord,int,ActivityOptions,String,boolean)>
<com.android.systemui.statusbar.notification.row.wrapper.NotificationMediaTemplateViewWrapper: void startTimer()>
